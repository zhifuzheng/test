package com.xryb.zhtc.action;

import java.util.Map;

import spark.Request;
import spark.Response;
import spark.Route;
import spark.Spark;
import spark.annotation.Auto;
import spark.servlet.ISparkApplication;

import com.xryb.zhtc.entity.UserInfo;
import com.xryb.zhtc.manage.UserMng;
import com.xryb.zhtc.util.CacheUtil;
import com.xryb.zhtc.util.JsonUtil;
import com.xryb.zhtc.util.ReqToEntityUtil;

/**
 * 用户相关PC端本工程外部调用接口
 * @author hshzh
 *
 */
public class UserAction implements ISparkApplication{
	@Auto(name=UserMng.class)
	private UserMng userMng;
	
	@Override
	public void run() {
		/**
		 * 添加或修改用户信息
		 */
		Spark.post(new Route("/system/user/addOrUpUser", true, "jdbcwrite") {
			@Override
			public Object handle(Request request, Response response) {
//				String token = (String)request.raw().getSession().getId();
//				Map map = (Map)JsonUtil.JsonToObj(CacheUtil.getInstance().getHttpCache("getTokenObject", token),Map.class);				
//				if (map == null) {
//					// 令牌取不到数据，说明没有登陆，或操作过期。
//					return false;
//				}
				// 获取当前登陆会员信息
				return userMng.addOrUpUser("jdbcwrite", false, request.raw(), response.raw());
			}
		});	
		
		/**
		 * 删除用户信息
		 */
		Spark.post(new Route("/system/user/deleteUser",true,"jdbcwrite") {
			@Override
			public Object handle(Request request, Response response) {
				String token = (String)request.raw().getSession().getId();
//				Map map = (Map)JsonUtil.JsonToObj(CacheUtil.getInstance().getHttpCache("getTokenObject", token), Map.class);	
//				if (map == null) {
//					// 令牌取不到数据，说明没有登陆，或操作过期。
//					return false;
//				}
				return userMng.deleteUser("jdbcwrite", false, request.raw(), response.raw());			
			}
		});	
		
		/**
		 * 修改用户状态
		 */
		Spark.post(new Route("/system/user/updateUserStatus",true,"jdbcwrite") {
			@Override
			public Object handle(Request request, Response response) {
				String token = (String)request.raw().getSession().getId();
				Map map = (Map)JsonUtil.JsonToObj(CacheUtil.getInstance().getHttpCache("getTokenObject", token), Map.class);	
				if (map == null) {
					// 令牌取不到数据，说明没有登陆，或操作过期。
					return false;
				}
				return userMng.updateUserStatus("jdbcwrite", false, request.raw(), response.raw());
			}
		});
		
		/**
		 * 查找用户信息
		 */
		Spark.get(new Route("/system/user/findUserInfo", false, "jdbcread") {		
			@Override
			public Object handle(Request request, Response response) {
//				String token = (String)request.raw().getSession().getId();
//				Map map = (Map)JsonUtil.JsonToObj(CacheUtil.getInstance().getHttpCache("getTokenObject", token),Map.class);	
//				if (map == null) {
//					// 令牌取不到数据，说明没有登陆，或操作过期。
//					return false;
//				}
			    return userMng.findUserInfo("jdbcread", true, request.raw(), response.raw());
			}
		});		
		
		Spark.post(new Route("/front/user/findUserInfo", false, "jdbcread") {		
			@Override
			public Object handle(Request request, Response response) {
			    return userMng.findUserInfo("jdbcread", true, request.raw(), response.raw());
			}
		});		
		
		/**
		 * 查找用户信息列表
		 */
		Spark.post(new Route("/system/user/findUserList", true, "jdbcread") {		
			@Override
			public Object handle(Request request, Response response) {
//				String token = (String)request.raw().getSession().getId();
//				Map map = (Map)JsonUtil.JsonToObj(CacheUtil.getInstance().getHttpCache("getTokenObject", token),Map.class);	
//				if (map == null) {
//					// 令牌取不到数据，说明没有登陆，或操作过期。
//					return false;
//				}	
				return userMng.findUserInfoList("jdbcread", false, request.raw(), response.raw());
			}				
		});

		/**
		 * 用户登陆
		 */
		Spark.post(new Route("/system/user/userLogin", true, "jdbcwrite"){
			@Override
			public Object handle(Request request, Response response) {
				return userMng.userLogin("jdbcwrite", false, request.raw(), response.raw());
			}			
		});
		/**
		 * 用户登陆(无验证码)
		 */
		Spark.post(new Route("/system/user/userLoginNoPassCode", true, "jdbcwrite"){
			@Override
			public Object handle(Request request, Response response) {
				System.out.println("用户登陆开始。。。");
				return userMng.userLogin("jdbcwrite", false, request.raw(), response.raw());
			}			
		});
		
		/**
		 * 修改密码
		 */
		Spark.post(new Route("/system/user/upUserPwd", true, "jdbcwrite") {			
			@Override
			public Object handle(Request request, Response response) throws Exception {
//				String token = request.raw().getParameter("token");
//				if (token == null) {
//					return false;
//				}
//				Map map = (Map)JsonUtil.JsonToObj(CacheUtil.getInstance().getHttpCache("getTokenObject", token),Map.class);	
//				if (map == null) {
//					// 令牌取不到数据，说明没有登陆，或操作过期。
//					return false;
//				}
				// 获取当前登陆用户信息
				UserInfo userinfo = (UserInfo)request.raw().getSession().getAttribute("userinfo");
				//request.raw()获得HttpServletRequest对象
				//response.raw()获得HttpServletResponse对象
				return userMng.upUserPwd("jdbcwrite", false, userinfo, request.raw(), response.raw());
			}
		});
		
		/**
		 * 初始化密码
		 */
		Spark.post(new Route("/system/user/initUserPwd", true, "jdbcwrite") {			
			@Override
			public Object handle(Request request, Response response) throws Exception {
				String token = (String)request.raw().getSession().getId();
				if (token == null) {
					return false;
				}
				Map map = (Map)JsonUtil.JsonToObj(CacheUtil.getInstance().getHttpCache("getTokenObject", token),Map.class);	
				if (map == null) {
					// 令牌取不到数据，说明没有登陆，或操作过期。
					return false;
				}
				// 获取当前登陆会员信息
				UserInfo userinfo = (UserInfo)ReqToEntityUtil.MapToEntity((Map)map.get("userinfo"), UserInfo.class);
				return userMng.initUserPwd("jdbcwrite", false, userinfo, request.raw(), response.raw());
			}
		});
		
		/**
		 * 查用户登陆名是否存在
		 * @param sourceId
		 * @param closeConn
		 * @return
		 */		
		Spark.post(new Route("/system/user/findLoginNameExist", false, "jdbcread") {
			@Override
			public Object handle(Request request, Response response) throws Exception {
				return userMng.findLoginNameExist("jdbcread", true,request.raw(), response.raw());
			}
		});
		
		/**
		 * 获取验证码
		 */
		Spark.get(new Route("/system/user/getVCode",false,"jdbcread") {
			@Override
			public Object handle(Request request, Response response) throws Exception {
				return userMng.getVCode(request.raw(), response.raw());
			}
		});
		
		/**
		 * 返回验证码
		 */
		Spark.post(new Route("/system/user/getVPassCode",false,"jdbcread") {
			@Override
			public Object handle(Request request, Response response) throws Exception {
				String token = request.raw().getSession().getId();
				if (token == null) {
					return "";
				}				 
				return  CacheUtil.getInstance().getHttpCache("getPassCode", token);
			}
		});
		
	}
	
}
