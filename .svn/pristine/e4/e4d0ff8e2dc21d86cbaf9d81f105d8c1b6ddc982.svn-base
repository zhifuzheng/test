package com.xryb.zhtc.service.impl;

import java.lang.reflect.Field;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.xryb.zhtc.entity.Account;
import com.xryb.zhtc.service.IAccountService;
import com.xryb.zhtc.util.DateTimeUtil;
import com.xryb.zhtc.util.RegExpUtil;

import dbengine.util.Page;
/**
 * 账户相关service
 * @author wf
 */
public class AccountServiceImpl extends BaseServiceImpl<Account> implements IAccountService {
	
	@Override
	public boolean saveOrUpdate(String sourceId, boolean closeConn, Account account) throws Exception {
		if(account == null){
			return false;
		}
		//生成sql语句
		StringBuffer insert = (new StringBuffer("insert into ")).append(tableName).append(" (");
		StringBuffer values = new StringBuffer(" values(");
		StringBuffer update = (new StringBuffer("update ")).append(tableName).append(" set ");
		//获取字节码对象
		Class<? extends Object> tClass = account.getClass();
		//获取对象的属性列表
		Field[] fields = tClass.getDeclaredFields();
		for (Field field : fields) {
			if("id".equals(field.getName()) || "accountUUID".equals(field.getName()) || "createTime".equals(field.getName()) || "updateTime".equals(field.getName()) || "serialVersionUID".equals(field.getName())){
				continue;
			}
			field.setAccessible(true);
			Object value = field.get(account);
			if(value != null){
				insert.append(field.getName()).append(",");
				values.append("'").append(value.toString().replaceAll("'", "\"")).append("',");
				update.append(field.getName()).append(" = '").append(value.toString().replaceAll("'", "\"")).append("',");
			}
		}
		String nowDate = DateTimeUtil.formatDate(new Date(), "yyyy-MM-dd HH:mm:ss");
		if(RegExpUtil.isNullOrEmpty(account.getAccountUUID())){//新增
			String accountUUID = UUID.randomUUID().toString().replaceAll("-", "");
			values.append("'").append(nowDate).append("','").append(accountUUID).append("')");
			insert.append("createTime,").append("accountUUID").append(")").append(values);
			//accountUUID返回
			account.setCreateTime(nowDate);
			account.setAccountUUID(accountUUID);
			return executeSql(sourceId, insert.toString(), closeConn, null);
		}else{//修改
			update.append("updateTime = '").append(nowDate).append("' where accountUUID = '").append(account.getAccountUUID()).append("'");
			account.setUpdateTime(nowDate);
			return executeSql(sourceId, update.toString(), closeConn, null);
		}
	}
	
	@Override
	public List<Account> findPageByMap(String sourceId, boolean closeConn, Page page, Map<String, String> findMap, String order) {
		//查询分页sql
		StringBuffer select = (new StringBuffer("select * from ")).append(tableName);
		if(findMap.size() > 0){
			select.append(" where ");
		}
		String accountStatus = null;
		for(Map.Entry<String, String> entry : findMap.entrySet()){
			if("accountStatus".equals(entry.getKey())){
				accountStatus = entry.getValue();
			}
		}
		if(accountStatus != null){
			findMap.remove("accountStatus");
		}
		int len = select.length();
		for(Map.Entry<String, String> entry : findMap.entrySet()){
			select.append(" or ").append(entry.getKey()).append(" like '%").append(entry.getValue().toString().replaceAll("'", "\"")).append("%'");
		}
		int firstOrIndex = select.indexOf("or",len);
		if(firstOrIndex == len+1){
			select.replace(firstOrIndex, firstOrIndex+2, "(").append(")");
		}
		if(accountStatus != null){
			select.append(" and accountStatus = '").append(accountStatus).append("'");
		}
		int firstAndIndex = select.indexOf("and",len);
		if(firstAndIndex == len+1){
			select.delete(firstAndIndex, firstAndIndex+3);
		}
		StringBuffer selectTotal = new StringBuffer(select.toString()).replace(select.indexOf("*"), select.indexOf("*")+1, "COUNT(0) as TOTAL");
		//查询总记录数
		Map<String, Object> map = findMapBysql(sourceId, selectTotal.toString(), closeConn, null);
		Long totalRecord = Long.valueOf((map.get("TOTAL").toString()));
		if(totalRecord == 0L){
			return null;
		}
		//计算开始索引
		Long index = (page.getPage()-1L)*page.getPageRecord();
		//计算总页数
		Long totalPage = (totalRecord+page.getPageRecord()-1)/page.getPageRecord();
		//分页查询
		if(!RegExpUtil.isNullOrEmpty(order)){
			select.append(" order by ").append(order);
		}
		select.append(" limit ").append(index).append(",").append(page.getPageRecord());
		List<Account> rows = findListBySql(sourceId, select.toString(), closeConn, c, null);
		page.setTotalRecord(totalRecord);
		page.setTotalPage(totalPage);
		page.setRows(rows);
		return (List<Account>) rows;
	}
	
}
